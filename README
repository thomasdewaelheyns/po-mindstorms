This repository contains software developed for a Computer Science course,
aiming to construct and program an autonomous Mindstorms robot, capable of
finding its way on a unknown track outlined by marker-lines and walls.
It's a group project I conducted with 4 fellow students:
- Michiel Huygen
- Florian Hendrickx
- Ruben Lapauw
- Thomas De Waelheyns
- Christophe Van Ginneken

We have developed robot implementations for three demo's and one final
project. To try these implementations follow these instructions:

+ Get a copy of the Lejos SDK

Visit http://lejos.sourceforge.net/nxj-downloads.php and download an SDK for your environment. Unpack the SDK in a subdirectory alongside this repository.

Use version 8.5beta!

./lejos_nxj
./po-mindstorms

+ Prepare bluetooth connections

Consult the Lejos documentation to setup a paired bluetooth connection between
your pc and your robot.

+ NetBeans

We have also provided an integrated NetBeans project in nbproject.

+ The bin/ directory contains some applications:

$ cd bin
$ make spy ARGS=-h
*** compiling MQ spy...
*** running MQ spy...
usage: MQSpy
 -h,--help         show this information.
 -j,--join <arg>   join <channel>. default=ghost
 -m,--mq <arg>     connect to MQ <server>. default=localhost

$ make rash ARGS=-h
*** compiling rash...
*** running rash...
usage: RobotAdminShellRunner
 -d,--debug          run in debug-mode.
 -h,--help           show this information.
 -j,--join <arg>     join <channel>. default=ghost
 -m,--mq <arg>       connect to MQ <server>. default=localhost
 -r,--robot <arg>    admin robot <name>. default=Platinum
 -s,--secret <arg>   <secret> for robot.

$ make gw ARGS=-h
*** compiling Gateway...
*** running Gateway...
usage: GatewayRunner
 -h,--help           show this information.
 -j,--join <arg>     join <channel>. default=ghost
 -m,--mq <arg>       connect to MQ <server>. default=localhost
 -r,--robot <arg>    admin robot <name>. default=Platinum
 -s,--secret <arg>   <secret> for robot.

$ make sim ARGS=-h
*** compiling Simulator...
*** running Simulator...
usage: SimulationRunner
 -d,--driver <arg>          use driver <classname>.
                            default=penoplatinum.driver.ManhattanDriver
 -g,--gatewayClient <arg>   use gatewayClient <classname>.
                            default=penoplatinum.simulator.SimulatedGatewa
                            yClient
 -h,--help                  show this helpful information.
 -m,--map <arg>             use mapfile. default=wolfraam.txt
 -n,--navigator <arg>       use navigator <classname>.
                            default=penoplatinum.navigator.GhostNavigator
 -p,--reporter <arg>        use reporter <classname>.
                            default=penoplatinum.reporter.DashboardReporte
                            r
 -q,--quiet                 don't show a user interface.
 -r,--robot <arg>           use robot <classname>.
                            default=penoplatinum.robot.GhostRobot
 -s,--start <arg>           use start number <number>. default=1

$ make sim

... will launch the simulator with sensible defaults. The simulator will not
do anything, because it is waiting for at least 3 more ghosts to show up. If
you start three more instances they would start moving around ;-)
